package net.atomation.rgbdemo.utils;

import android.app.Activity;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;

/**
 * Class containing general utility methods
 * Created by eyal on 15/09/2016.
 */
public class Utils {

    private static final String DATE_DATA_FORMAT = "HH:mm:ss dd-MM-yyyy";
    private static final SimpleDateFormat SDF = new SimpleDateFormat(DATE_DATA_FORMAT, Locale.US);

    private static final int BATTERY_RESISTOR_1 = 20;
    private static final int BATTERY_RESISTOR_2 = 3;
    private static final double BATTERY_REFERENCE_VOLTAGE = 3.3;
    private static final int BATTERY_MAX_RESOLUTION = 511;


    public static String epochToDateString(long time) {
        Calendar c = Calendar.getInstance();
        c.setTimeInMillis(time);
        return SDF.format(c.getTime());
    }

    // TODO: 09/01/2017 remove this once the sdk has a generic method for this
    public static double convertRawBatteryToVoltage(double rawBattery) {
        return ((BATTERY_RESISTOR_1 + BATTERY_RESISTOR_2) * rawBattery * BATTERY_REFERENCE_VOLTAGE) / (BATTERY_RESISTOR_2 * BATTERY_MAX_RESOLUTION);
    }

    public static double convertBatteryVoltageToPercentage(double batteryInVoltage, double minVoltage, double maxVoltage) {
        double retVal;

        //subtracted by BATTERY_MIN_VOLTAGE in order to normalize the values:
        double normalizedPercentage = (((batteryInVoltage - minVoltage) / (maxVoltage - minVoltage)) * 100);

        if (normalizedPercentage > 100){
            retVal = 100;
        } else if (normalizedPercentage < 0){
            retVal = 0;
        } else {
            retVal = normalizedPercentage;
        }

        return retVal;
    }

    @NonNull
    public static String byteArrayToHex(byte[] a) {
        if (a == null) {
            return "null";
        }

        if (a.length == 0) {
            return "no data";
        }

        StringBuilder sb = new StringBuilder(a.length * 2);
        for(byte b: a) {
            sb.append(String.format("%02x", b & 0xff));
        }

        return sb.toString();
    }

    /**
     * This method converts a byte array of length of 4 or less (so the value can be contained in an int) to int
     * note: padding 0s will be added according to endianity if the length is less than 4 bytes
     * @param toParse - the byte array to convert
     * @param endian - the endianity of the given array
     * @return the int value of the given byte array
     * @throws Exception
     */
    public static int bytesToInt(byte[] toParse, ByteOrder endian) throws Exception {
        if (toParse.length > 4) {
            throw new Exception("bytesToInt: invalid input array size. length - " + toParse.length);
        }

        byte[] temp = new byte[] {0, 0, 0, 0};

        int destStartIndex = endian.equals(ByteOrder.BIG_ENDIAN) ? temp.length - toParse.length : 0;
        System.arraycopy(toParse, 0, temp, destStartIndex, toParse.length);
        return ByteBuffer.wrap(temp).order(endian).getInt();
    }

    /**
     * This method convert an int into byte array with customized length and endianity
     * @param toParse - the int to convert
     * @param toFill - the destination byte array. must be in range (0,4]
     * @param endian - desired endian. either ByteOrder.LITTLE_ENDIAN or ByteOrder.BIG_ENDIAN
     * @throws Exception
     */
    private static void intToBytes(int toParse, byte[] toFill, ByteOrder endian) throws Exception {
        if (toFill.length <= 0 || toFill.length > 4) {
            throw new Exception("intToBytes: invalid array length: " + toFill.length);
        }

        int[] maxArray = new int[] {0, 0xff, 0xffff, 0xffffff, Integer.MAX_VALUE};
        int maxVal = maxArray[toFill.length];

        if (toParse > maxVal) {
            throw new Exception(String.format(Locale.getDefault(), "intToBytes: input too big. input - %d, max value %d", toParse, maxVal));
        }

        byte[] intVal = ByteBuffer.allocate(4).order(endian).putInt(toParse).array();

        for (int i = 0; i < toFill.length; i++) {
            toFill[i] = 0;
        }

        int srcStartIndex = endian.equals(ByteOrder.BIG_ENDIAN) ? intVal.length - toFill.length : 0;
        System.arraycopy(intVal, srcStartIndex, toFill, 0, toFill.length);
    }

    /**
     * This method converts an int to a generated byte array of the desired length and endianity
     * @param toParse - the int to convert
     * @param length - length of the destination array. must be in range (0,4]
     * @param endian - desired endianity for the destination array
     * @return a new byte array with the value of the given int in the given endianity
     * @throws Exception
     */
    public static byte[] intToBytes(int toParse, int length, ByteOrder endian) throws Exception {
        byte[] retVal = new byte[length];
        intToBytes(toParse, retVal, endian);
        return retVal;
    }

	public static boolean requestPermissionIfNeeded(Activity activity, String permission, int permissionId){
		if (ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED) {
			ActivityCompat.requestPermissions(activity, new String[]{permission}, permissionId);
			return true;
		}
		return false;
	}
}
